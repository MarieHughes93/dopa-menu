const app ={
    SESSION_REQUEST: 'REQUESTING_SESSION',
    SESSION_FAILURE: 'REQUEST_FAILED',
    SESSION_SUCCESS: 'ACTIVE_SESSION',

    SESSION_END_REQUEST: 'REQUESTING_SESSION_TERMINATION',
    SESSION_END_SUCCESS: 'SESSION_TERMINATED',
    SESSION_END_FAILURE: 'FAILURE_SESSION_TERMINATION'
}

const user = {
    REGISTER_REQUEST: 'REQUESTING_REGISTRATION',
    REGISTER_SUCCESS: 'REGISTERED',
    REGISTER_FAILURE: 'REGISTING_FAILURE'
}
const menu={
    INDEX_REQUEST: 'INDEX_REQUEST',
    INDEX_SUCCESS: 'INDEX_SUCCESS',
    INDEX_FAILURE: 'INDEX_FAILURE',
 
    CREATE_REQUEST: 'ITEM_CREATE_REQUEST',
    CREATE_SUCCESS: 'ITEM_CREATE_SUCCESS',
    CREATE_FAILURE: 'ITEM_CREATE_FAILURE',
 
    UPDATE_REQUEST: 'ITEM_UPDATE_REQUEST',
    UPDATE_SUCCESS: 'ITEM_UPDATE_SUCCESS',
    UPDATE_FAILURE: 'ITEM_UPDATE_FAILURE',
 
    DELETE_REQUEST: 'ITEM_DELETE_REQUEST',
    DELTE_SUCCESS: 'ITEM_DELETE_SUCCESS',
    DELETE_FAILURE: 'ITEM_DELETE_FAILURE'
} 

export const actionCreator = {
       app,
       menu,
       user
}






import {actionCreator} from './actionCreators'
import {helpers} from '../helpers/_index'
import history from '../helpers/history'

// user
const registerRequest = (payload) => ({type: actionCreator.user.REGISTER_REQUEST, payload})
const registerFailure = (payload) => ({type: actionCreator.user.REGISTER_FAILURE, payload})
const registerSuccess = (payload) => ({type: actionCreator.user.REGISTER_SUCCESS, payload})

// app
const logInRequest = (payload) => ({type: actionCreator.app.SESSION_REQUEST, payload})
const logInFailure =( payload) => ({type: actionCreator.app.SESSION_FAILURE, payload})
const logInSuccess = (payload) => ({type: actionCreator.app.SESSION_SUCCESS, payload})


const logOutRequest = (payload) => ({type: actionCreator.app.SESSION_END_REQUEST,payload})
const logOutFailure = (payload) => ({type: actionCreator.app.SESSION_END_FAILURE,payload})
const logOutSuccess = (payload) => ({type: actionCreator.app.SESSION_END_SUCCESS,payload})

const register = (user) => dispatch => {
    dispatch(registerRequest(user))
        helpers.fetch.apiRegister(user)
            .then(
                error => {
                    dispatch(registerFailure(error.toString()))
                },
                data => { 
                    dispatch(registerSuccess(data))
                    history.push('/login')
                }
            )
}
const logIn = (user) => dispatch => {
    dispatch(logInRequest(user))
    helpers.fetch.apiLogin(user)
    .then(
        error => {
            dispatch(logInFailure(error.toString()))
        },
        data => { 
            localStorage.setItem("sessionID", data.token)
            dispatch(logInSuccess(data))
            history.push('/dashboard')
        }
    )
}
const logOut = () => dispatch => {
    dispatch(logOutRequest())
    helpers.fetch.apilogout()
    .then(
        error =>{
            dispatch(logOutFailure)
            console.log('error')
        },
        success => {
            dispatch(logOutSuccess)
            history.push('/')
        },
    )
}
        
export const userAction = {
    register,
    logIn,
    logOut
}







import {actions} from '../actions/_index'
let sessionID = localStorage.getItem("sessionID")

const defaultState = sessionID ? 
{ loggedIn: true, 
    user: {sessionID}
 }:{
    loggedIn: false,
    user: {},
}


export const appReducer = (state = defaultState, action) => {
    switch(action.type){
                case actions.app.SESSION_REQUEST:
                    return {
                        loggingIn: true,
                        user: action.sessionID
                    }
                case actions.app.SESSION_FAILURE:
                    return {}
                case actions.app.SESSION_SUCCESS:
                    return {
                        loggedIn: true,
                        user: {...action.sessionID}
                    }
                case actions.app.SESSION_END_REQUEST:
                    return{}
                case actions.app.SESSION_END_SUCCESS:
                    return {
                        loggedIn: false 
                    }
                case actions.app.SESSION_END_FAILURE:
                    return{}
                default: return state
            }
        }








import React, { Component } from "react"
import {Nav,Navbar, Button} from 'react-bootstrap'
import {connect} from 'react-redux'
import ActiveLink from '../components/activeLink'
import {actions} from '../actions/_index'
import history from '../helpers/history'
// import NavLink from '../components/navlink'

class NavHeader extends Component{
  

  handleLogOutButton = () => {
    this.props.logOut()
  }
  handleLoginButton = () => {
    history.push('/login')
  }

  render() {
    const links = this.props.links
    const loggedIn = this.props.loggedIn
    return (
      <Navbar bg="dark" variant="dark">
        <Navbar.Brand href="/">Dopa-Menu</Navbar.Brand>
        <Nav className="routes">
          {links.map((route) =>
            <ActiveLink
              path={route.path}
              text={route.text}
              isActive={route.isActive}
              key={route.path} 
            />)}
            {loggedIn ?
            <Button type="button" variant="outline-light" size="sm" onClick={() => this.handleLogOutButton()}>LogOut</Button>
            : 
            <Button type="button" variant="outline-light" size="sm" onClick={this.handleLoginButton()}>Login</Button>
            }
				</Nav>
      </Navbar>
    )
  }
}
const mapDispatchToProps = (dispatch) => {
  return {
      logOut: (userInfo) => dispatch(actions.user.logOut(userInfo))
  }
}
    
export default connect(null, mapDispatchToProps)(NavHeader)




 {loggedIn ?
            <Button type="button" variant="outline-light" size="sm" onClick={() => this.handleLogOutButton()}>LogOut</Button>
            : 
            <Button type="button" variant="outline-light" size="sm" onClick={this.handleLoginButton()}>Login</Button>
            }
				</Nav>


import React, { Component } from "react"
import {Nav,Navbar, Button} from 'react-bootstrap'
import ActiveLink from '../components/activeLink'
import {userAction} from '../actions/userAction'
import history from '../helpers/history'
// import NavLink from '../components/navlink'

class NavHeader extends Component{
  
  
  handleLogOutButton = () => {
    userAction.logOut()
  }
  handleLoginButton = () => {
    history.push('/login')
  }

  render() {
    const links = this.props.links
    const loggedIn = this.props.loggedIn
    return (
      <Navbar bg="dark" variant="dark">
        <Navbar.Brand href="/">Dopa-Menu</Navbar.Brand>
        <Nav className="routes">
          {links.map((route) =>
            <ActiveLink
              path={route.path}
              text={route.text}
              isActive={route.isActive}
              key={route.path} 
            />)}
            {loggedIn ?
            <Button type="button" variant="outline-light" size="sm" onClick={() => this.handleLogOutButton()}>LogOut</Button>
            : 
            <Button type="button" variant="outline-light" size="sm" onClick={this.handleLoginButton()}>Login</Button>
            }
				</Nav>
      </Navbar>
    )
  }
}
    
export default NavHeader